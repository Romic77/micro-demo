// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: micro-demo.proto

package proto

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MicroDemo service

func NewMicroDemoEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for MicroDemo service

type MicroDemoService interface {
	Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Stream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (MicroDemo_StreamService, error)
	PingPong(ctx context.Context, opts ...client.CallOption) (MicroDemo_PingPongService, error)
}

type microDemoService struct {
	c    client.Client
	name string
}

func NewMicroDemoService(name string, c client.Client) MicroDemoService {
	return &microDemoService{
		c:    c,
		name: name,
	}
}

func (c *microDemoService) Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MicroDemo.Call", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microDemoService) Stream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (MicroDemo_StreamService, error) {
	req := c.c.NewRequest(c.name, "MicroDemo.Stream", &StreamingRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &microDemoServiceStream{stream}, nil
}

type MicroDemo_StreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*StreamingResponse, error)
}

type microDemoServiceStream struct {
	stream client.Stream
}

func (x *microDemoServiceStream) Close() error {
	return x.stream.Close()
}

func (x *microDemoServiceStream) Context() context.Context {
	return x.stream.Context()
}

func (x *microDemoServiceStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *microDemoServiceStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *microDemoServiceStream) Recv() (*StreamingResponse, error) {
	m := new(StreamingResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *microDemoService) PingPong(ctx context.Context, opts ...client.CallOption) (MicroDemo_PingPongService, error) {
	req := c.c.NewRequest(c.name, "MicroDemo.PingPong", &Ping{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &microDemoServicePingPong{stream}, nil
}

type MicroDemo_PingPongService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Ping) error
	Recv() (*Pong, error)
}

type microDemoServicePingPong struct {
	stream client.Stream
}

func (x *microDemoServicePingPong) Close() error {
	return x.stream.Close()
}

func (x *microDemoServicePingPong) Context() context.Context {
	return x.stream.Context()
}

func (x *microDemoServicePingPong) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *microDemoServicePingPong) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *microDemoServicePingPong) Send(m *Ping) error {
	return x.stream.Send(m)
}

func (x *microDemoServicePingPong) Recv() (*Pong, error) {
	m := new(Pong)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for MicroDemo service

type MicroDemoHandler interface {
	Call(context.Context, *Request, *Response) error
	Stream(context.Context, *StreamingRequest, MicroDemo_StreamStream) error
	PingPong(context.Context, MicroDemo_PingPongStream) error
}

func RegisterMicroDemoHandler(s server.Server, hdlr MicroDemoHandler, opts ...server.HandlerOption) error {
	type microDemo interface {
		Call(ctx context.Context, in *Request, out *Response) error
		Stream(ctx context.Context, stream server.Stream) error
		PingPong(ctx context.Context, stream server.Stream) error
	}
	type MicroDemo struct {
		microDemo
	}
	h := &microDemoHandler{hdlr}
	return s.Handle(s.NewHandler(&MicroDemo{h}, opts...))
}

type microDemoHandler struct {
	MicroDemoHandler
}

func (h *microDemoHandler) Call(ctx context.Context, in *Request, out *Response) error {
	return h.MicroDemoHandler.Call(ctx, in, out)
}

func (h *microDemoHandler) Stream(ctx context.Context, stream server.Stream) error {
	m := new(StreamingRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.MicroDemoHandler.Stream(ctx, m, &microDemoStreamStream{stream})
}

type MicroDemo_StreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*StreamingResponse) error
}

type microDemoStreamStream struct {
	stream server.Stream
}

func (x *microDemoStreamStream) Close() error {
	return x.stream.Close()
}

func (x *microDemoStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *microDemoStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *microDemoStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *microDemoStreamStream) Send(m *StreamingResponse) error {
	return x.stream.Send(m)
}

func (h *microDemoHandler) PingPong(ctx context.Context, stream server.Stream) error {
	return h.MicroDemoHandler.PingPong(ctx, &microDemoPingPongStream{stream})
}

type MicroDemo_PingPongStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Pong) error
	Recv() (*Ping, error)
}

type microDemoPingPongStream struct {
	stream server.Stream
}

func (x *microDemoPingPongStream) Close() error {
	return x.stream.Close()
}

func (x *microDemoPingPongStream) Context() context.Context {
	return x.stream.Context()
}

func (x *microDemoPingPongStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *microDemoPingPongStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *microDemoPingPongStream) Send(m *Pong) error {
	return x.stream.Send(m)
}

func (x *microDemoPingPongStream) Recv() (*Ping, error) {
	m := new(Ping)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
